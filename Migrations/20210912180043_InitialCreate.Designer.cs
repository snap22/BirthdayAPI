// <auto-generated />
using System;
using BirthdayAPI.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BirthdayAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210912180043_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BirthdayAPI.Persistence.Models.Normal.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("AccountId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Account");
                });

            modelBuilder.Entity("BirthdayAPI.Persistence.Models.Normal.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Info")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.HasKey("ContactId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("BirthdayAPI.Persistence.Models.Normal.Gift", b =>
                {
                    b.Property<int>("GiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("EstimatedPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("GiftId");

                    b.HasIndex("ContactId");

                    b.ToTable("Gift");
                });

            modelBuilder.Entity("BirthdayAPI.Persistence.Models.Normal.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("NoteId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("BirthdayAPI.Persistence.Models.Normal.Profile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("ProfileId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("BirthdayAPI.Persistence.Models.Normal.Contact", b =>
                {
                    b.HasOne("BirthdayAPI.Persistence.Models.Normal.Profile", "Profile")
                        .WithMany("Contacts")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("BirthdayAPI.Persistence.Models.Normal.Gift", b =>
                {
                    b.HasOne("BirthdayAPI.Persistence.Models.Normal.Contact", "Contact")
                        .WithMany("Gifts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("BirthdayAPI.Persistence.Models.Normal.Note", b =>
                {
                    b.HasOne("BirthdayAPI.Persistence.Models.Normal.Profile", "Profile")
                        .WithMany("Notes")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("BirthdayAPI.Persistence.Models.Normal.Profile", b =>
                {
                    b.HasOne("BirthdayAPI.Persistence.Models.Normal.Account", "Account")
                        .WithOne("Profile")
                        .HasForeignKey("BirthdayAPI.Persistence.Models.Normal.Profile", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BirthdayAPI.Persistence.Models.Normal.Account", b =>
                {
                    b.Navigation("Profile");
                });

            modelBuilder.Entity("BirthdayAPI.Persistence.Models.Normal.Contact", b =>
                {
                    b.Navigation("Gifts");
                });

            modelBuilder.Entity("BirthdayAPI.Persistence.Models.Normal.Profile", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
